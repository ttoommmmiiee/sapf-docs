"use strict";(self.webpackChunksapf_docs=self.webpackChunksapf_docs||[]).push([[117],{1350:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"language-basics/types","title":"Types","description":"\\"It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures.\\"","source":"@site/docs/language-basics/types.md","sourceDirName":"language-basics","slug":"/language-basics/types","permalink":"/sapf-docs/language-basics/types","draft":false,"unlisted":false,"editUrl":"https://github.com/ttoommmmiiee/sapf-docs/tree/main/packages/create-docusaurus/templates/shared/docs/language-basics/types.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Language Basics","permalink":"/sapf-docs/category/language-basics"},"next":{"title":"Syntax","permalink":"/sapf-docs/language-basics/syntax"}}');var a=n(4848),i=n(8453);const r={sidebar_position:1},o="Types",c={},l=[];function u(e){const t={blockquote:"blockquote",h1:"h1",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"types",children:"Types"})}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.p,{children:'"It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures."\nAlan Perlis'}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"The language has a bare minimum of data types:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Real"})," - a 64 bit double precision floating point number for quantifying things."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"String"})," - a string of characters for naming things."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"List"})," - Ordered lists of values that function as both arrays and lazy potentially infinitely long sequences."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Form"})," - An object that maps symbolic names to values. A form is a dictionary with inheritance."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Function"})," - Functions are values that when applied take values from the stack and evaluate an expression."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Ref"})," - A mutable container for a value. This is the only mutable data type."]}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(6540);const a={},i=s.createContext(a);function r(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);