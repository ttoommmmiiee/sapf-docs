"use strict";(self.webpackChunksapf_docs=self.webpackChunksapf_docs||[]).push([[46],{2851:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>x,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"reference/everything","title":"Reference","description":"BUILT IN FUNCTIONS","source":"@site/docs/reference/everything.md","sourceDirName":"reference","slug":"/reference/everything","permalink":"/sapf-docs/reference/everything","draft":false,"unlisted":false,"editUrl":"https://github.com/ttoommmmiiee/sapf-docs/tree/main/packages/create-docusaurus/templates/shared/docs/reference/everything.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Reference","permalink":"/sapf-docs/category/reference"}}');var i=t(4848),r=t(8453);const s={sidebar_position:1},o="Reference",l={},d=[{value:"BUILT IN FUNCTIONS",id:"built-in-functions",level:2},{value:"stack ops",id:"stack-ops",level:3},{value:"loops",id:"loops",level:3},{value:"conditional ops",id:"conditional-ops",level:3},{value:"form ops",id:"form-ops",level:3},{value:"ref ops",id:"ref-ops",level:3},{value:"function ops",id:"function-ops",level:3},{value:"printing ops",id:"printing-ops",level:3},{value:"string ops",id:"string-ops",level:3},{value:"sample rate ops",id:"sample-rate-ops",level:3},{value:"help ops",id:"help-ops",level:3},{value:"thread ops",id:"thread-ops",level:3},{value:"misc",id:"misc",level:3},{value:"text files",id:"text-files",level:3},{value:"unary math ops",id:"unary-math-ops",level:3},{value:"binary math ops",id:"binary-math-ops",level:3},{value:"list conversion",id:"list-conversion",level:3},{value:"basic list operations",id:"basic-list-operations",level:3},{value:"list generation",id:"list-generation",level:3},{value:"list reduction operations",id:"list-reduction-operations",level:3},{value:"list ordering operations",id:"list-ordering-operations",level:3},{value:"list ops",id:"list-ops",level:3},{value:"event list operations",id:"event-list-operations",level:3},{value:"dsp operations",id:"dsp-operations",level:3},{value:"audio I/O operations",id:"audio-io-operations",level:3},{value:"random number generation",id:"random-number-generation",level:3},{value:"single random numbers",id:"single-random-numbers",level:3},{value:"random streams",id:"random-streams",level:3},{value:"random signals",id:"random-signals",level:3},{value:"finite random streams",id:"finite-random-streams",level:3},{value:"finite random signals",id:"finite-random-signals",level:3},{value:"noise unit generators",id:"noise-unit-generators",level:3},{value:"unit generators",id:"unit-generators",level:3},{value:"wavetable generation",id:"wavetable-generation",level:3},{value:"classic wave tables",id:"classic-wave-tables",level:3},{value:"oscillator unit generators",id:"oscillator-unit-generators",level:3},{value:"filter unit generators",id:"filter-unit-generators",level:3},{value:"delay unit generators",id:"delay-unit-generators",level:3},{value:"plugs",id:"plugs",level:3},{value:"control rate subgraphs",id:"control-rate-subgraphs",level:3},{value:"control function unit generators",id:"control-function-unit-generators",level:3},{value:"random control unit generators",id:"random-control-unit-generators",level:3},{value:"tempo unit generators",id:"tempo-unit-generators",level:3},{value:"envelope unit generators",id:"envelope-unit-generators",level:3},{value:"spawn unit generators",id:"spawn-unit-generators",level:3},{value:"pause unit generator",id:"pause-unit-generator",level:3},{value:"panner unit generators",id:"panner-unit-generators",level:3},{value:"trigger unit generators",id:"trigger-unit-generators",level:3},{value:"bounds unit generators",id:"bounds-unit-generators",level:3},{value:"mouse control unit generators",id:"mouse-control-unit-generators",level:3},{value:"MIDI control",id:"midi-control",level:3},{value:"MIDI instantaneous value",id:"midi-instantaneous-value",level:3},{value:"MIDI control signal",id:"midi-control-signal",level:3},{value:"ZRef control signal",id:"zref-control-signal",level:3},{value:"set operations",id:"set-operations",level:3},{value:"USER DEFINED FUNCTIONS",id:"user-defined-functions",level:2},{value:"printing",id:"printing",level:3},{value:"common counts",id:"common-counts",level:3},{value:"list ops",id:"list-ops-1",level:3},{value:"ordinal accessing",id:"ordinal-accessing",level:3},{value:"each operators",id:"each-operators",level:3},{value:"list generation",id:"list-generation-1",level:3},{value:"range mapping",id:"range-mapping",level:3},{value:"range checking",id:"range-checking",level:3},{value:"borrowed from APL",id:"borrowed-from-apl",level:3},{value:"conditional mapping",id:"conditional-mapping",level:3},{value:"data flow operators",id:"data-flow-operators",level:3},{value:"statistics",id:"statistics",level:3},{value:"numbers",id:"numbers",level:3},{value:"common random number generators",id:"common-random-number-generators",level:3},{value:"unipolar random number generators",id:"unipolar-random-number-generators",level:3},{value:"bipolar random number generators",id:"bipolar-random-number-generators",level:3},{value:"random walks",id:"random-walks",level:3},{value:"composite ugens",id:"composite-ugens",level:3},{value:"amplitude",id:"amplitude",level:3},{value:"uses of hilbert processor",id:"uses-of-hilbert-processor",level:3},{value:"simple allpass reverbs",id:"simple-allpass-reverbs",level:3},{value:"random sweeps and pans",id:"random-sweeps-and-pans",level:3},{value:"crossover filters",id:"crossover-filters",level:3},{value:"delays with wet/dry mix",id:"delays-with-wetdry-mix",level:3},{value:"complex polar",id:"complex-polar",level:3},{value:"zero padding",id:"zero-padding",level:3},{value:"dsp functions",id:"dsp-functions",level:3},{value:"normalization",id:"normalization",level:3},{value:"12 tone pitch set operations",id:"12-tone-pitch-set-operations",level:3},{value:"pitch operations",id:"pitch-operations",level:3},{value:"rhythm",id:"rhythm",level:3},{value:"list co-length operations",id:"list-co-length-operations",level:3},{value:"synths",id:"synths",level:3},{value:"events",id:"events",level:3}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"reference",children:"Reference"})}),"\n",(0,i.jsx)(n.h2,{id:"built-in-functions",children:"BUILT IN FUNCTIONS"}),"\n",(0,i.jsx)(n.p,{children:"Argument Automapping legend:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"a"})," - as is. argument is not automapped."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"z"})," - argument is expected to be a signal or scalar, streams are auto mapped."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"k"})," - argument is expected to be a scalar, signals and streams are automapped."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"stack-ops",children:"stack ops"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"clear (... --\x3e) clears everything off the stack.\ncleard (... a --\x3e a) clears all but the top item from the stack.\nstackDepth (--\x3e n) returns the size of the stack.\naa (a --\x3e a a) push the top item on stack again.\naaa (a --\x3e a a a) push the top item on stack two more times.\nba (a b --\x3e b a) swap top two items.\nbac (a b c --\x3e b a c) reorder items on stack.\ncba (a b c --\x3e c b a) reorder items on stack.\nbca (a b c --\x3e b c a) reorder items on stack.\ncab (a b c --\x3e c a b) reorder items on stack.\nbab (a b --\x3e b a b) reorder items on stack.\naba (a b --\x3e a b a) reorder items on stack.\naab (a b --\x3e a a b) reorder items on stack.\naabb (a b --\x3e a a b b) reorder items on stack.\nabab (a b --\x3e a b a b) reorder items on stack.\nnip (a b --\x3e b) remove second item on stack.\npop (a --\x3e) remove top item on stack.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"loops",children:"loops"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"do (list \\item[..] --\x3e) applies the function to each item of a finite list. Useful for side effects like printing or file writing.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"conditional-ops",children:"conditional ops"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"equals (a b --\x3e bool) returns 1 if a and b are structurally equivalent. If the data structures are cyclic then this may never terminate.\nless (a b --\x3e bool) returns 1 if a is less than b structurally. If the data structures are cyclic then this may never terminate.\ngreater (a b --\x3e bool) returns 1 if a is greater than b structurally. If the data structures are cyclic then this may never terminate.\nif (A B C --\x3e ..) if A is true then apply B else apply C.\nnot (A --\x3e bool) returns 0 if A is true and 1 if A is false.\ntry (A B --\x3e ..) apply function A. if an exception is thrown, function B is applied.\nthrow (a --\x3e) throw an exception.\nprotect (A B --\x3e ..) apply function A. if an exception is thrown, function B is applied and the exception is rethrown. Otherwise function B is applied and control continues as normal.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"form-ops",children:"form ops"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"has @kk (form key --\x3e bool) return whether a form contains the key.\nkeys @k (form --\x3e keys) return an array of the keys of the form.\nvalues @k (form --\x3e values) return an array of the values of the form.\nkv @k (form --\x3e keys values) return two arrays of the keys and values of the form.\nlocal @k (form --\x3e local) return the head of the prototype inheritance list.\nparent @k (form --\x3e parent) return the tail of the prototype inheritance list.\ndot @ka (form key --\x3e item) return the value for the key.\npushWorkspace (--\x3e) pushes a new outer scope onto the workspace. New bindings will be made in the new outer scope.\npopWorkspace (--\x3e) pops a scope from the workspace. All bindings in the outer scope will be forgotten.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"ref-ops",children:"ref ops"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-get",metastring:"@k (r --\x3e a) return the value store in a ref.",children:"set (a r --\x3e) store the value a in the ref r.\nR (a --\x3e r) create a new Ref with the inital value a\nZR (z --\x3e r) create a new ZRef with the inital value z. A ZRefs is a mutable reference to a real number.\nP (a --\x3e out in) create a new stream plug pair with the inital value a\nZP (a --\x3e out in) create a new signal plug pair with the inital value a.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"function-ops",children:"function ops"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Y (funA --\x3e funB) Y combinator. funB calls funA with the last argument being funB itself. Currently the only way to do recursion. \n\t\te.g. \\x f [x 2 < \\[1] \\[ x x -- f *] if] Y = factorial    7 factorial --\x3e 5040\nnoeach (fun --\x3e fun) sets a flag in the function so that it will pass through arguments with @ operators without mapping them.\n! (... f --\x3e ...) apply the function to its arguments, observing @ arguments as appropriate.\n!e (form fun --\x3e ...) for each argument in the function, find the same named fields in the form and push those values as arguments to the function.\ncompile (string --\x3e fun) compile the string and return a function.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"printing-ops",children:"printing ops"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"printLength (--\x3e length) return the number of items printed for lists.\nprintDepth (--\x3e depth) return the number of levels of nesting printed for lists.\nsetPrintLength (length --\x3e ) set the number of items printed for lists.\nsetPrintDepth (depth --\x3e) set the number of levels of nesting printed for lists.\npr (A --\x3e) print the top item on the stack. (no space or carriage return is printed)\nprdebug (A --\x3e) print debug version of the top item on the stack. (no space or carriage return is printed)\ncr (--\x3e) print a carriage return.\nsp (--\x3e) print a space character.\ntab (--\x3e) print a tab.\nprstk (--\x3e) print the stack.\nminfo (--\x3e) print memory management info.\nlistdump (list --\x3e) prints information about a list.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"string-ops",children:"string ops"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"str (x --\x3e string) convert x to a string.\ndebugstr (x --\x3e string) convert x to a debug string.\nstrcat @ak (list separator --\x3e string) convert elements of list to a string with separator string between each.\nstrlines (list --\x3e string) convert elements of list to a newline separated string.\nglob @k (pattern --\x3e paths) return a list of file path names that match.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"sample-rate-ops",children:"sample rate ops"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"sr (--\x3e sampleRate) returns the sample rate. samples per second. \nnyq (--\x3e sampleRate/2) returns the nyquist rate\nisr (--\x3e 1/sampleRate) returns the inverse sample rate\ninyq (--\x3e 2/sampleRate) returns the inverse nyquist rate.\nrps (--\x3e 2pi/sampleRate) returns the radians per sample\n"})}),"\n",(0,i.jsx)(n.h3,{id:"help-ops",children:"help ops"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"help (fun --\x3e) prints help for a function.\nhelpbifs (--\x3e) prints help for all built in functions.\nhelpudfs (--\x3e) prints help for all user defined functions.\nhelpall (--\x3e) prints help for all built in and user defined functions.\nhelpLine (string --\x3e) add a line to the user defined function help.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"thread-ops",children:"thread ops"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"go (fun --\x3e) launches the function in a new thread.\nsleep (seconds --\x3e) sleeps the current thread for the time given.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"misc",children:"misc"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"type (a --\x3e symbol) return a symbol naming the type of the value a.\ntrace (bool --\x3e) turn tracing on/off in the interpreter.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"text-files",children:"text files"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"load (filename --\x3e) compiles and executes a text file.\nprelude (--\x3e) opens the prelude file in the default text editor.\nexamples (--\x3e) opens the examples file in the default text editor.\nlogfile (--\x3e) opens the log file in the default text editor.\nreadme (--\x3e) opens the README file in the default text editor.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"unary-math-ops",children:"unary math ops"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"isalnum (x --\x3e z) return whether an ASCII value is alphanumeric.\nisalpha (x --\x3e z) return whether an ASCII value is alphabetic.\nisblank (x --\x3e z) return whether an ASCII value is a space or tab character.\niscntrl (x --\x3e z) return whether an ASCII value is a control character.\nisdigit (x --\x3e z) return whether an ASCII value is a digit.\nisgraph (x --\x3e z) return whether an ASCII value is a graphic character.\nislower (x --\x3e z) return whether an ASCII value is lower case.\nisprint (x --\x3e z) return whether an ASCII value is a printable character.\nispunct (x --\x3e z) return whether an ASCII value is a punctuation character.\nisspace (x --\x3e z) return whether an ASCII value is a graphic character.\nisupper (x --\x3e z) return whether an ASCII value is upper case.\nisxdigit (x --\x3e z) return whether an ASCII value is a hexadecimal digit.\nisascii (x --\x3e z) return whether a value is ASCII\ntolower (x --\x3e z) convert an ASCII character value to lower case.\ntoupper (x --\x3e z) convert an ASCII character value to upper case.\ntoascii (x --\x3e z) convert a value to ASCII by stripping the upper bits.\n0<= (x --\x3e z) less than or equal to zero.\n0>= (x --\x3e z) greater than or equal to zero.\n0< (x --\x3e z) less than zero.\n0> (x --\x3e z) greater than zero.\n0= (x --\x3e z) equal to zero.\neven? (x --\x3e z) is even.\nodd? (x --\x3e z) is odd.\nprime? (x --\x3e z) is prime.\nint? (x --\x3e z) is integer.\nisfinite (x --\x3e z) is x a finite number.\nisinf (x --\x3e z) is x an infinity.\nisnan (x --\x3e z) is x not a number.\nisnormal (x --\x3e z) is x a normalized number (as opposed to denormals).\nsignbit (x --\x3e z) sign bit of x.\nabs (x --\x3e z) absolute value.\nsgn (x --\x3e z) signum function. returns -1 when x < 0, 0 when x == 0, 1 when x > 0.\n~ (x --\x3e z) logical negation. returns 1 when x == 0, else returns 0.\nneg (x --\x3e z) negative. -x\nsqrt (x --\x3e z) square root.\ncbrt (x --\x3e z) cube root.\nrsqrt (x --\x3e z) reciprocal square root.\nsq (x --\x3e z) square. x x *\nssq (x --\x3e z) signed square. x x abs *\ncb (x --\x3e z) x cubed. x 3 ^\n^2 (x --\x3e z) x squared. x x *\n^3 (x --\x3e z) x cubed. x 3 ^\n^4 (x --\x3e z) x to the fourth power. x 4 ^\n^5 (x --\x3e z) x to the fifth power. x 5 ^\n^6 (x --\x3e z) x to the sixth power. x 6 ^\n^7 (x --\x3e z) x to the seventh power. x 7 ^\n^8 (x --\x3e z) x to the eighth power. x 8 ^\n^9 (x --\x3e z) x to the ninth power. x 9 ^\nrecip (x --\x3e z) reciprocal.\n1/ (x --\x3e z) reciprocal. 1 x /\nexp (x --\x3e z) e to the x.\nexp2 (x --\x3e z) 2 to the x.\nexp10 (x --\x3e z) 10 to the x.\ne^ (x --\x3e z) e to the x.\n2^ (x --\x3e z) 2 to the x.\n10^ (x --\x3e z) 10 to the x.\nexpm1 (x --\x3e z) computes exp(x-1) accurately even for very small values of x.\nlog (x --\x3e z) base e log of x.\nlog2 (x --\x3e z) base 2 log of x.\nlog10 (x --\x3e z) base 10 log of x.\nlog1p (x --\x3e z) computes the value of log(1+x) accurately even for very small values of x.\nlogb (x --\x3e z) x log2 floor\nfrac (x --\x3e z) fractional part.\nfloor (x --\x3e z) nearest integer <= x.\nceil (x --\x3e z) nearest integer >= x.\nrint (x --\x3e z) nearest integer.\nerf (x --\x3e z) the error function.\nerfc (x --\x3e z) the complement of the error function.\nsinc (x --\x3e z) sinc. x sin x /\nsin (x --\x3e z) sine.\ncos (x --\x3e z) cosine.\nsin1 (x --\x3e z) sine(x * 2pi).\ncos1 (x --\x3e z) cosine(x * 2pi).\ntan (x --\x3e z) tangent.\nasin (x --\x3e z) arcsine.\nacos (x --\x3e z) arccosine.\natan (x --\x3e z) arctangent.\nsinh (x --\x3e z) hyperbolic sine.\ncosh (x --\x3e z) hyperbolic cosine.\ntanh (x --\x3e z) hyperbolic tangent.\nasinh (x --\x3e z) hyperbolic arcsine.\nacosh (x --\x3e z) hyperbolic arccosine.\natanh (x --\x3e z) hyperbolic arctangent.\nJ0 (x --\x3e z) zeroth Bessel function of the first kind evaluated at x.\nJ1 (x --\x3e z) first Bessel function of the first kind evaluated at x.\nY0 (x --\x3e z) zeroth Bessel function of the second kind evaluated at x.\nY1 (x --\x3e z) first Bessel function of the second kind evaluated at x.\ntgamma (x --\x3e z) the gamma function.\nlgamma (x --\x3e z) natural logarithm of the absolute value of the gamma function.\ninc (x --\x3e z) increment. x 1 +\ndec (x --\x3e z) decrement. x 1 -\nhalf (x --\x3e z) x .5 *\ntwice (x --\x3e z) x 2 *\n++ (x --\x3e z) increment. x 1 +\n-- (x --\x3e z) decrement. x 1 -\n/2 (x --\x3e z) half.\n*2 (x --\x3e z) twice.\nbiuni (x --\x3e z) convert bipolar to unipolar. .5 * .5 +\nunibi (x --\x3e z) convert unipolar to bipolar. 2 * 1 -\nbiunic (x --\x3e z) convert bipolar to unipolar with clipping to range. -1 1 clip .5 * .5 +\nunibic (x --\x3e z) convert unipolar to bipolar with clipping to range. 0 1 clip 2 * 1 -\ncmpl (x --\x3e z) unipolar complement. 1 x -\nampdb (x --\x3e z) convert linear amplitude to decibels.\ndbamp (x --\x3e z) convert decibels to linear amplitude.\nohz (x --\x3e z) convert octaves to Hertz. Octave 0.0 is middle C.\nhzo (x --\x3e z) convert Hertz to octaves. Octave 0.0 is middle C.\nnnhz (x --\x3e z) convert MIDI note numbers to Hertz. 60 is middle C.\nhznn (x --\x3e z) convert Hertz to MIDI note numbers. 60 is middle C.\ncentsratio (x --\x3e z) convert an interval in cents to a ratio.\nratiocents (x --\x3e z) convert a ratio to an interval in cents.\nsemiratio (x --\x3e z) convert an interval in semitones to a ratio.\nratiosemi (x --\x3e z) a ratio to an interval in semitones.\nminsec (x --\x3e z) convert from minutes to seconds. also for converting from bps to bpm\nsecmin (x --\x3e z) convert from seconds to minutes. also for converting from bpm to bps.\nbpmsec (x --\x3e z) convert from beats per minute to a period in seconds(e.g. for delay times)\ndegrad (x --\x3e z) convert from degrees to radians.\nraddeg (x --\x3e z) convert from radians to degrees.\ndistort (x --\x3e z) sigmoid wave distortion function. x/sqrt(1 + x^2)\nsoftclip (x --\x3e z) sigmoid wave distortion function. returns x when abs(x) < .5, else returns (abs(x) - .25) / x\nsigm (x --\x3e z) sigmoid wave distortion function. x/sqrt(1+x*x).\nrectWin (x --\x3e z) rectangular window for x in the interval [0,1].\ntriWin (x --\x3e z) triangular window for x in the interval [0,1].\nbitriWin (x --\x3e z) triangular window for x in the interval [-1,1]\nhanWin (x --\x3e z) hanning window for x in the interval [0,1]\nsinWin (x --\x3e z) sine window for x in the interval [0,1]\nramp (x --\x3e z) return 0 when x <= 0, return x when 0 < x < 1, return 1 when x > 1.\nscurve (x --\x3e z) return 0 when x <= 0, return 3*x*x - 2*x*x*x when 0 < x < 1, return 1 when x > 1.\nzapgremlins (x --\x3e z) \n"})}),"\n",(0,i.jsx)(n.h3,{id:"binary-math-ops",children:"binary math ops"}),"\n",(0,i.jsx)(n.p,{children:"All built-in binary math operators have the following variations defined:\nop/   (list --\x3e z) reducing math operator.\nop\\   (list --\x3e z) scanning math operator.\nop^   (list --\x3e z) pairwise math operator.\nop/i  (list init --\x3e z) reducing math operator with initial value.\nop\\i  (list init --\x3e z) scanning math operator with initial value.\nop^i  (list init --\x3e z) pairwise math operator with initial value.\nFor example, + has the following variations: +/  +\\  +^  +/i  +\\i  +^i"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"+ (x y --\x3e z) addition.\n+> (x y --\x3e z) addition. For lists, acts as if shorter list were extended with zeroes.\n- (x y --\x3e z) subtraction.\n* (x y --\x3e z) multiplication.\n/ (x y --\x3e z) real division.\n% (x y --\x3e z) modulo.\nidiv (x y --\x3e z) integer division.\nimod (x y --\x3e z) integer modulo.\nremainder (x y --\x3e z) remainder.\n< (x y --\x3e z) less than.\n<= (x y --\x3e z) less than or equal.\n> (x y --\x3e z) greater than.\n>= (x y --\x3e z) greater than or equal.\n== (x y --\x3e z) equal.\n!= (x y --\x3e z) not equal.\ncmp (x y --\x3e z) returns -1 when x < y, returns 1 when x > y, returns 0 when x == y.\ncopysign (x y --\x3e z) copy the sign of y to the value of x.\nnextafter (x y --\x3e z) return the next machine representable number from x in direction y.\npow (x y --\x3e z) x to the power y.\n^ (x y --\x3e z) x to the power y.\natan2 (x y --\x3e z) arctangent of y/x.\nJn (x y --\x3e z) yth Bessel function of the first kind evaluated at x.\nYn (x y --\x3e z) yth Bessel function of the second kind evaluated at x.\n& (x y --\x3e z) return the minimum of x and y. functions as logical AND.\n| (x y --\x3e z) return the maximum of x and y. functions as logical OR.\navg2 (x y --\x3e z) x y + .5 *\ndim (x y --\x3e z) positive difference of x and y. x y - 0 |\nabsdif (x y --\x3e z) x y - abs\nhypot (x y --\x3e z) x sq y sq + sqrt\nsumsq (x y --\x3e z) x sq y sq +\ndifsq (x y --\x3e z) x sq y sq -\nsqsum (x y --\x3e z) x y + sq\nsqdif (x y --\x3e z) x y - sq\nthresh (x y --\x3e z) returns 0 when x < y, else returns x.\nabsthresh (x y --\x3e z) returns 0 when |x| < y, else returns x.\namclip (x y --\x3e z) returns 0 when y <= 0, else returns x*y.\nscaleneg (x y --\x3e z) returns x*y when x < 0, else returns x.\nring1 (x y --\x3e z) x y * x +\nring2 (x y --\x3e z) x y * x + y +\nring3 (x y --\x3e z) x sq y *\nring4 (x y --\x3e z) x y * x y - *\ngcd (x y --\x3e z) greatest common divisor.\nlcm (x y --\x3e z) least common multiple.\nclip0 (x y --\x3e z) clip x between 0 and y.\nwrap0 (x y --\x3e z) wrap x between 0 and y.\nfold0 (x y --\x3e z) fold x between 0 and y.\nclip2 (x y --\x3e z) clip x between -y and y.\nwrap2 (x y --\x3e z) wrap x between -y and y.\nfold2 (x y --\x3e z) fold x between -y and y.\niwrap2 (x y --\x3e z) wrap integer x between -y and y.\nifold2 (x y --\x3e z) fold integer x between -y and y.\nexcess (x y --\x3e z) return the excess after clipping. x x y clip2 -\nround (x y --\x3e z) round x to nearest multiple of y.\nroundUp (x y --\x3e z) round x to nearest multiple of y >= x.\ntrunc (x y --\x3e z) round x to nearest multiple of y <= x\n"})}),"\n",(0,i.jsx)(n.h3,{id:"list-conversion",children:"list conversion"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"V (signal --\x3e stream) converts a signal or string to a stream.\nZ (series --\x3e signal) converts a stream or string to a signal.\nL (anything --\x3e stream) streams are returned as is. anything else is made into an infinite stream of itself.\nL1 (anything --\x3e stream) streams are returned as is. anything else is wrapped in a one item list.\nunspell (sequence --\x3e string) converts a stream of numbers or a signal to a string.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"basic-list-operations",children:"basic list operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"size (seq --\x3e num) Return the length of a sequence if it is finite. Returns inf if the sequence is of indefinite length (It may not actually be infinitely long).\nrank (a --\x3e n) Return the rank of an object. Makes the assumption that lists at all depths are homogenous.\nshape (a --\x3e [n..]) Return the shape of an object. Axes of indefinite length are represented by inf. Makes the assumption that lists at all depths are homogenous.\nfinite (seq --\x3e bool) Returns 1 if the sequence is finite, 0 if indefinite.\nempty (list --\x3e bool) returns whether the list is empty.\nnonempty (list --\x3e bool) returns whether the list is nonempty.\nhead (list --\x3e item) returns first item of list. fails if list is empty.\ntail (list --\x3e list) returns the rest of the list after the first item. fails if list is empty.\nadd (list item --\x3e list) returns a new list with the item added to the end.\ncons (list item --\x3e list) returns a new list with the item added to the front.\nuncons (list --\x3e tail head) returns the tail and head of a list. fails if list is empty.\npack (list --\x3e list) returns a packed version of the list.\npacked (list --\x3e bool) returns whether the list is packed.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"list-generation",children:"list generation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"ord (--\x3e series) return an infinite series of integers ascending from 1.\nnat (--\x3e series) return an infinite series of integers ascending from 0.\ninvs (--\x3e series) return an infinite series of reciprocals. equivalent to ord 1/\nnegs (--\x3e series) return an infinite series of integers descending from -1.\nevens (--\x3e series) return an infinite series of ascending non-negative even integers.\nodds (--\x3e series) return an infinite series of ascending non-negative odd integers.\nints (--\x3e series) return the infinite series [0 1 -1 2 -2 3 -3...]\nprimes (--\x3e series) returns a finite series of prime numbers up to 1000039.\nfib @kk (a b --\x3e series) returns a fibonacci series starting with the two numbers given.\nordz (--\x3e signal) return an infinite signal of integers ascending from 1.\nnatz (--\x3e signal) return an infinite signal of integers ascending from 0.\ninvz (--\x3e signal) return an infinite signal of reciprocals. equivalent to ordz 1/\nnegz (--\x3e signal) return an infinite signal of integers descending from -1.\nevenz (--\x3e signal) return an infinite signal of ascending non-negative even integers.\noddz (--\x3e signal) return an infinite signal of ascending non-negative odd integers.\nintz (--\x3e signal) return the infinite signal [0 1 -1 2 -2 3 -3...]\nprimez (--\x3e signal) returns a finite signal of prime numbers up to 1000039.\nfibz @zz (a b --\x3e signal) returns a fibonacci signal starting with the two numbers given.\nninvs @k (n --\x3e stream) return a finite stream of n reciprocals. equivalent to n 1 1 nby 1/\nninvz @z (n --\x3e signal) return a finite signal of n reciprocals. equivalent to n 1 1 nbyz 1/\never (value --\x3e series) return an infinite stream of value.\nby @kk (start step --\x3e series) return an infinite arithmetic series.\nnby @kkk (n start step --\x3e series) return a finite arithmetic series.\ngrow @kk (start step --\x3e series) return an infinite geometric series.\nngrow @kkk (start step --\x3e series) return a finite geometric series.\nto @kk (a b --\x3e series) return a finite series from a to b stepping by +1 if a < b, or -1 if a < b.\neverz @z (value --\x3e signal) return an infinite signal of value.\nbyz @zz (start step --\x3e series) return an infinite arithmetic series as a signal.\nnbyz @zzz (start step --\x3e series) return a finite arithmetic series as a signal.\ngrowz @zz (start step --\x3e series) return an infinite geometric series as a signal.\nngrowz @zzz (start step --\x3e series) return a finite geometric series as a signal.\ntoz @zz (a b --\x3e series) return a finite signal from a to b stepping by +1 if a < b, or -1 if a < b.\nlindiv @kkk (n start end --\x3e series) returns a series of n equal steps from start to end.\nexpdiv @kkk (n start end --\x3e series) returns a series of n exponentially spaced steps from start to end.\nlindivz @zzz (n start end --\x3e series) returns a signal of n equal steps from start to end.\nexpdivz @zzz (n start end --\x3e series)  returns a signal of n exponentially spaced steps from start to end.\nlindiv1 @kkk (n start end --\x3e series) returns a series of n equal steps from start up to but not including end.\nexpdiv1 @kkk (n start end --\x3e series) returns a series of n exponentially spaced steps from start up to but not including end.\nlindiv1z @zzz (n start end --\x3e series) returns a signal of n equal steps from start up to but not including end.\nexpdiv1z @zzz (n start end --\x3e series)  returns a signal of n exponentially spaced steps from start up to but not including end.\nline @zzz (dur start end --\x3e z) return a signal ramping linearly from start to end in dur seconds.\nxline @zzz (dur start end --\x3e z) return a signal ramping exponentially from start to end in dur seconds.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"list-reduction-operations",children:"list reduction operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"reduce @aak (list value fun --\x3e value) applies fun to each item in list and the current value to get a new value. returns the ending value.\nreduce1 @ak (list fun --\x3e value) like reduce except that the initial value is the first item in the list.\nscan @aak (list value fun --\x3e list) applies fun to each item in list and the current value to get a new value, which is added to the output list.\nscan1 @ak (list fun --\x3e list) like scan except that the initial value is the first item in the list.\niter @ak (value fun --\x3e list) returns an infinite list of repeated applications of fun to value.\nitern @akk (value fun n --\x3e list) returns a list of n repeated applications of fun to value.\nchain @akk (value fun n --\x3e list) returns the result of n repeated applications of fun to value.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"list-ordering-operations",children:"list ordering operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"cyc (list --\x3e list) makes a finite list become cyclic.\nncyc @ak (n list --\x3e list) concatenates n copies of a finite list.\nrcyc (ref --\x3e list) gets a new list from ref each time list is exhausted.\nX @ak (value n --\x3e stream) makes a list containing n copies of value. If value is a function, then the results of applying the function with an integer count argument is used as the contents of the output list.\nXZ @zz (value n --\x3e signal) returns a signal with value repeated n times.\nmum @z (t --\x3e signal) returns a signal of t seconds of silence.\n$ (listA listB --\x3e out) returns the concatenation of listA and listB.\n$z @zz (signalA signalB --\x3e signal) returns the concatenation of signalA and signalB.\n$$ (listA listB --\x3e out) return the concatenation of the sublists of listA and listB. equivalent to (listA @ listB @ $)\n$/ (list --\x3e out) returns the concatenation of the sub-lists of the input list.\nflat (list --\x3e list) flattens a list.\nflatten @ak (list n --\x3e list) makes a list n levels flatter.\nkeep @ak (list n --\x3e list) returns a list of the first n items of the input list.\nT @zk (signal t --\x3e signal) returns a signal of the first t seconds of the input signal.\nT> @zk (signal t --\x3e signal) skips the first t seconds of the input signal.\nN> @ak (list n --\x3e list) skips the first n items of the input list.\nN>> (list hops --\x3e listOfLists) returns a list of tails of the input list. equivalent to (list (hops 0 | L 0 cons +\\) N>).\nT>> @za (signal hops --\x3e listOfSignals) returns a list of tails of the input list. equivalent to (signal (hops 0 | L 0 cons +\\) T>).\nN @ak (list n --\x3e list) returns a list of the first n items of the input list.\nNZ @zk (signal n --\x3e signal) returns a signal of the first n items of the input signal. automaps over streams.\nskip @ak (list n --\x3e list) skips the first n items of the input list.\ntake @ak (list n --\x3e list) returns a list of the first n items of the input list, or the last n items if n is negative and the list is finite.\ndrop @ak (list n --\x3e list) skips the first n items of the input list, or the last n items if n is negative and the list is finite.\nchoff @akk (channel(s) c n --\x3e out) takes a finite list of channels or a single signal and places it into an array of n channels beginning at offset c. Other channels are set to zero.\ntog (a b --\x3e series) return a series alternating between a and b.\ntogz @zz (a b --\x3e signal) return a signal alternating between a and b.\nsel (a j --\x3e out) select. a is a list of lists. out[i] is a[j][i]\nsell (a j --\x3e out) lazy select. a is a list of lists. out[i] is the next value from a[j].\n? (a b --\x3e out) the output list contains a[i] repeated b[i] times. If b is a list of booleans (1 or 0) then this functions as a filter.\nspread (a n --\x3e out) inserts n[i] zeroes after a[i].\nspreadz @zz (a n --\x3e signal) inserts n[i] zeroes after a[i]. automaps over stream inputs.\nchange (a --\x3e b) eliminates sequential duplicates in a signal or stream.\nchangez @z (a --\x3e b) eliminates sequential duplicates in a signal. automaps over streams.\nexpand (a b --\x3e out) when b is true, a value from a is written to out, when b is false, zero is written to out.\nexpandz @zz (a b --\x3e out) when b is true, a value from a is written to out, when b is false, zero is written to out. automaps over stream inputs.\nclump (a n --\x3e out) groups elements from list a into sub-lists of size n.\nhang (a --\x3e out) repeats the last value of a finite list indefinitely.\nhangz @z (a --\x3e out) repeats the last value of a finite signal indefinitely. automaps over streams.\nhisto @ak (a n --\x3e out) makes a histogram of the finite stream a.\nhistoz @zk (a n --\x3e out) makes a histogram of the finite signal a. automaps over streams.\nkeepWhile (a b --\x3e out) return items from a while items from b are true.\nskipWhile (a b --\x3e out) skip items from a while items from b are true.\nflop (a --\x3e b) returns the transpose of the list of lists a. At least one of the dimensions must be finite.\nflops (a --\x3e b) like flop, but signals are treated as scalars and not flopped.\nflop1 (a --\x3e b) like flop, but if list a is not a list of lists then it is wrapped in a list. compare: [[1 2 3][[4 5] 6 7]] @ flop $/ with: [[1 2 3][[4 5] 6 7]] @ flop1 $/\nlace (a --\x3e b) returns the concatenation of the transpose of the list of lists a.\nmerge @aak (a b fun --\x3e c) merges two lists according to the function given. The function should work like <.\nmergec @aak (a b fun --\x3e c) merges two lists without duplicates according to the function given. The function should work like cmp.\nperms (a --\x3e b) returns a list of all permutations of the input list.\npermz @z (a --\x3e b) returns a list of all permutations of the input signal. automaps over streams.\npermswr (a --\x3e b) returns a list of all unique permutations of an input stream with repeated elements.\npermzwr @z (a --\x3e b) returns a returns a list of all unique permutations of an input signal with repeated elements. automaps over streams.\nshortas (a b --\x3e a') makes list a as short as list b.\nlongas (a b --\x3e a') makes list a as long as list b by repeating the last item.\nlongas0 (a b --\x3e a') makes list a as long as list b by appending zeroes.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"list-ops",children:"list ops"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"bub (a --\x3e [a]) makes the top item on the stack into a one item list. i.e. puts a bubble around it.\nnbub (a n --\x3e [[..[a]..]]) embeds the top item in N one item lists.\n2ple (a b --\x3e [a b]) make a pair from the top two stack items.\n3ple (a b c --\x3e [a b c]) make a triple from the top three stack items.\n4ple (a b c d --\x3e [a b c d]) make a quadriple from the top four stack items.\n5ple (a b c d e --\x3e [a b c d e]) make a quintuple from the top five stack items.\n6ple (a b c d e f --\x3e [a b c d e f]) make a sextuple from the top six stack items.\n7ple (a b c d e f g --\x3e [a b c d e f g]) make a septuple from the top seven stack items.\n8ple (a b c d e f g h --\x3e [a b c d e f g h]) make an octuple from the top eight stack items.\n2ples @kk (a b --\x3e [[a0 b0][a1 b1]..[aN bN]]) make a sequence of pairs from the sequences a and b.\n3ples @kkk (a b c --\x3e [[a0 b0 c0][a1 b1 c1]..[aN bN cN]]) make a sequence of triples from the sequences a, b and c.\n4ples @kkkk (a b c d --\x3e seq) make a sequence of quadruples from the sequences a, b, c and d.\n5ples @kkkkk (a b c d e --\x3e seq) make a sequence of quintuples from the sequences a through e.\n6ples @kkkkkk (a b c d e f--\x3e seq) make a sequence of sextuples from the sequences a through f.\n7ples @kkkkkkk (a b c d e f g--\x3e seq) make a sequence of septuples from the sequences a through g.\n8ples @kkkkkkkk (a b c d e f g h --\x3e seq) make a sequence of octuples from the sequences a through h.\nun2 ([a0 a1 .. aN-1] --\x3e a0 a1) Push two items from a sequence onto the stack.\nun3 ([a0 a1 .. aN-1] --\x3e a0 a1 a2) Push three items from a sequence onto the stack.\nun4 ([a0 a1 .. aN-1] --\x3e a0 a1 a2 a3) Push four items from a sequence onto the stack.\nun5 ([a0 a1 .. aN-1] --\x3e a0 a1 a2 a3 a4) Push five items from a sequence onto the stack.\nun6 ([a0 a1 .. aN-1] --\x3e a0 a1 a2 .. a5) Push six items from a sequence onto the stack.\nun7 ([a0 a1 .. aN-1] --\x3e a0 a1 a2 .. a6) Push seven items from a sequence onto the stack.\nun8 ([a0 a1 .. aN-1] --\x3e a0 a1 a2 .. a7) Push eight items from a sequence onto the stack.\nreverse (a --\x3e b) reverses a finite sequence.\nmirror0 (a --\x3e b) cyclic mirror of a sequence. [1 2 3 4] --\x3e [1 2 3 4 3 2]\nmirror1 (a --\x3e b) odd mirror of a sequence. [1 2 3 4] --\x3e [1 2 3 4 3 2 1]\nmirror2 (a --\x3e b) even mirror of a sequence. [1 2 3 4] --\x3e [1 2 3 4 4 3 2 1]\nrot @ak (seq M --\x3e seq') rotation of a sequence by M places. M > 0 moves right.\nshift @ak (seq M --\x3e seq') shift of a sequence by M places. zeroes are shifted in to fill vacated positions.\nclipShift @ak (seq M --\x3e seq') shift of a sequence by M places. the end value is copied in to fill vacated positions.\nfoldShift @ak (seq M --\x3e seq') shift of a sequence by M places. values from the cyclic mirrored sequence are copied in to fill vacated positions.\nmuss (a --\x3e b) puts a finite sequence into a random order.\nat (seq index(es) --\x3e value(s)) looks up item(s) in sequence at index(es). out of range indexes return zero.\nwrapAt (seq index(es) --\x3e value(s)) looks up item(s) in sequence at index(es). out of range indexes return the value at the end point.\nfoldAt (seq index(es) --\x3e value(s)) looks up item(s) in sequence at index(es). out of range indexes return the items from the cyclic sequence.\nclipAt (seq index(es) --\x3e value(s)) looks up item(s) in sequence at index(es). out of range indexes return items from the cyclic mirrored sequence.\ndegkey (degree scale --\x3e converts scale degree(s) to keys, given a scale\nkeydeg (key scale --\x3e converts key(s) to scale degree(s), given a scale\nsort (in --\x3e out) ascending order sort of the input list.\nsortf @ak (in fun --\x3e out) sort of the input list using a compare function.\nsort> (in --\x3e out) descending order sort of the input list.\ngrade (in --\x3e out) ascending order sorted indices of the input list.\ngradef @ak (in fun --\x3e out) sorted indices of the input list using a compare function.\ngrade> (in --\x3e out) descending order sorted indices of the input list.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"event-list-operations",children:"event list operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"evmerge @aak (a b t --\x3e c) merges event list 'b' with delay 't' with event list 'a' according to their delta times\nevdelay @ak (a t --\x3e c) delay an event list by adding a preceeding rest of duration 't'\nevrest @aak (t --\x3e c) returns a rest event for duration 't'.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"dsp-operations",children:"dsp operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"kaiser @zz (n stopBandAttenuation --\x3e out) returns a signal filled with a kaiser window with the given stop band attenuation.\nhanning @z (n --\x3e out) returns a signal filled with a Hanning window.\nhamming @z (n --\x3e out) returns a signal filled with a Hamming window.\nblackman @z (n --\x3e out) returns a signal filled with a Blackman window.\nfft @zz (re im --\x3e out) returns the complex FFT of two vectors (one real and one imaginary) which are a power of two length.\nifft @zz (re im --\x3e out) returns the complex IFFT of two vectors (one real and one imaginary) which are a power of two length.\nseg @zaa (in hops durs --\x3e out) divide input signal in to a stream of signal segments of given duration stepping by hop time.\nwseg @zaz (in hops window --\x3e out) divide input signal in to a stream of windowed signal segments of lengths equal to the window length, stepping by hop time.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"audio-io-operations",children:"audio I/O operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"play (channels --\x3e) plays the audio to the hardware.\nrecord (channels filename --\x3e) plays the audio to the hardware and records it to a file.\nstop (--\x3e) stops any audio playing.\nsf> (filename --\x3e) read channels from an audio file. not real time.\n>sf (channels filename --\x3e) writes the audio to a file.\n>sfo (channels filename --\x3e) writes the audio to a file and opens it in the default application.\nbench (channels --\x3e) prints the amount of CPU required to compute a segment of audio. audio must be of finite duration.\nsgram (signal dBfloor filename --\x3e) writes a spectrogram to a file and opens it.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"random-number-generation",children:"random number generation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"newseed (--\x3e seed) make a new random seed.\nsetseed (seed --\x3e) set the random seed.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"single-random-numbers",children:"single random numbers"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"rand @kk (a b --\x3e r) return a uniformly distributed random real value from a to b.\ncoin @k (p --\x3e r) return 1 with probability p, or 0 with probability (1-p).\nrand2 @k (a --\x3e r) return a uniformly distributed random real value from -a to +a.\nirand @kk (a b --\x3e r) return a uniformly distributed random integer value from a to b.\nirand2 @k (a --\x3e r) return a uniformly distributed random real value from -a to +a.\nxrand @kk (a b --\x3e r) return a exponentially distributed random real value from a to b.\nlinrand @kk (a b --\x3e r) return a linearly distributed random real value from a to b.\nilinrand @kk (a b --\x3e r) return a linearly distributed random integer value from a to b.\nwrand (w --\x3e r) return a randomly chosen index from a list of probability weights. w should sum to one.\npick (a --\x3e r) return a randomly chosen element from the finite list a.\nwpick (a w --\x3e r) return a randomly chosen element from the finite list a using probability weights from w. w must be the same length as a and should sum to one.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"random-streams",children:"random streams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"rands @kk (a b --\x3e r) return a stream of uniformly distributed random real values from a to b.\ncoins @k (p --\x3e r) return a stream of 1 with probability p, or 0 with probability (1-p).\neprands @kk (a b --\x3e r) return a stream of uniformly distributed random integer values from a to b, excluding the previously returned value.\nrand2s @k (a --\x3e r) return a stream of uniformly distributed random real values from -a to +a.\nirands @kk (a b --\x3e r) return a stream of uniformly distributed random integer values from a to b.\nirand2s @k (a --\x3e r) return a stream of uniformly distributed random real values from -a to +a.\nxrands @kk (a b --\x3e r) return a stream of exponentially distributed random real values from a to b.\nlinrands @kk (a b --\x3e r) return a stream of linearly distributed random real values from a to b.\nilinrands @kk (a b --\x3e r) return a stream of linearly distributed random integer values from a to b.\nwrands (w --\x3e r) return a stream of randomly chosen indices from a list of probability weights. w should sum to one.\npicks (a --\x3e r) return a stream of randomly chosen elements from the finite list a.\nwpicks (a w --\x3e r) return a stream of randomly chosen elements from the finite list a using probability weights from w. w must be the same length as a and should sum to one.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"random-signals",children:"random signals"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"randz @zz (a b --\x3e r) return a signal of uniformly distributed random real values from a to b.\ncoinz @z (p --\x3e r) return a signal of 1 with probability p, or 0 with probability (1-p).\neprandz @zz (a b --\x3e r) return a signal of uniformly distributed random integer values from a to b, excluding the previously returned value\nrand2z @z (a --\x3e r) return a signal of uniformly distributed random real values from -a to +a.\nirandz @zz (a b --\x3e r) return a signal of uniformly distributed random integer values from a to b.\nirand2z @z (a --\x3e r) return a signal of uniformly distributed random real values from -a to +a.\nxrandz @zz (a b --\x3e r) return a signal of exponentially distributed random real values from a to b.\nlinrandz @zz (a b --\x3e r) return a signal of linearly distributed random real values from a to b.\nilinrandz @zz (a b --\x3e r) return a signal of linearly distributed random integer values from a to b.\nwrandz @z (w --\x3e r) return a signal of randomly chosen indices from a list of probability weights. w should sum to one.\npickz @z (a --\x3e r) return a signal of randomly chosen elements from the finite list a.\nwpickz @zz (a w --\x3e r) return a signal of randomly chosen elements from the finite list a using probability weights from w. w must be the same length as a and should sum to one.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"finite-random-streams",children:"finite random streams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"nrands @kkk (n a b --\x3e r) return a stream of n uniformly distributed random real values from a to b.\nncoins @kk (n p --\x3e r) return a stream of n 1 with probability p, or 0 with probability (1-p).\nneprands @kkk (n a b --\x3e r) return a stream of n uniformly distributed random integer values from a to b, excluding the previously returned value.\nnrand2s @kk (n a --\x3e r) return a stream of n uniformly distributed random real values from -a to +a.\nnirands @kkk (n a b --\x3e r) return a stream of n uniformly distributed random integer values from a to b.\nnirand2s @kk (n a --\x3e r) return a stream of n uniformly distributed random real values from -a to +a.\nnxrands @kkk (n a b --\x3e r) return a stream of n exponentially distributed random real values from a to b.\nnlinrands @kkk (n a b --\x3e r) return a stream of n linearly distributed random real values from a to b.\nnilinrands @kkk (n a b --\x3e r) return a stream of n linearly distributed random integer values from a to b.\nnwrands @ka (n w --\x3e r) return a stream of n randomly chosen indices from a list of probability weights. w should sum to one.\nnpicks @ka (n a --\x3e r) return a stream of n randomly chosen elements from the finite list a.\nnwpicks @kaa (n a w --\x3e r) return a stream of n randomly chosen elements from the finite list a using probability weights from w. w must be the same length as a and should sum to one.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"finite-random-signals",children:"finite random signals"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"nrandz @zzz (n a b --\x3e r) return a signal of n uniformly distributed random real values from a to b.\nncoinz @zz (n p --\x3e r) return a signal of n 1 with probability p, or 0 with probability (1-p).\nneprandz @zzz (n a b --\x3e r) return a signal of n uniformly distributed random integer values from a to b, excluding the previously returned value\nnrand2z @zz (n a --\x3e r) return a signal of n uniformly distributed random real values from -a to +a.\nnirandz @zzz (n a b --\x3e r) return a signal of n uniformly distributed random integer values from a to b.\nnirand2z @zz (n a --\x3e r) return a signal of n uniformly distributed random real values from -a to +a.\nnxrandz @zzz (n a b --\x3e r) return a signal of n exponentially distributed random real values from a to b.\nnlinrandz @zzz (n a b --\x3e r) return a signal of n linearly distributed random real values from a to b.\nnilinrandz @zzz (n a b --\x3e r) return a signal of n linearly distributed random integer values from a to b.\nnwrandz @zz (n w --\x3e r) return a signal of n randomly chosen indices from a list of probability weights. w should sum to one.\nnpickz @zz (n a --\x3e r) return a signal of n randomly chosen elements from the finite signal a.\nnwpickz @zzz (n a w --\x3e r) return a signal of n randomly chosen elements from the finite signal a using probability weights from w. w must be the same length as a and should sum to one.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"noise-unit-generators",children:"noise unit generators"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"violet @z (amp --\x3e z) violet noise\nblue @z (amp --\x3e z) blue noise\nxorwhite @z (amp --\x3e z) white noise\nxorwhite2 @z (amp --\x3e z) white noise\nrawhite @z (amp --\x3e z) white noise based on Cessu's random access random numbers\nwangwhite @z (amp --\x3e z) white noise based on Thomas Wang's integer hash\ncitywhite @z (amp --\x3e z) white noise based on a function from CityHash\nwhite @z (amp --\x3e z) white noise\npink @z (amp --\x3e z) pink noise\npink0 @z (amp --\x3e z) pink noise\nbrown @z (amp --\x3e z) brown noise\ngray @z (amp --\x3e z) bit flip noise\ngray64 @z (amp --\x3e z) bit flip noise\ndust @zz (density amp --\x3e z) a stream of impulses whose amplitude is random from 0 to a and whose average density is in impulses per second.\ndust2 @zz (density amp --\x3e z) a stream of impulses whose amplitude is random from -a to +a and whose average density is in impulses per second.\nvelvet @zz (density amp --\x3e z) a stream of impulses whose amplitude is randomly either -a or +a and whose average density is in impulses per second.\ntoosh @zz (delay amp --\x3e z) flanged noise. difference of two white noise sources with a delay.\ntooshp @zz (delay amp--\x3e z) flanged noise. sum of two white noise sources with a delay. no null at delay == 0. \ncrackle @z (param --\x3e z) a chaotic generator.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"unit-generators",children:"unit generators"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"*+ @zzz (a b c --\x3e out) multiply add. a b * c +\n"})}),"\n",(0,i.jsx)(n.h3,{id:"wavetable-generation",children:"wavetable generation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"wavefill @aak (amps phases smooth -> wavetable) generates a set 1/3 octave wavetables for table lookup oscillators. sin(i*theta + phases[i])*amps[i]*pow(cos(pi*i/n), smooth). smoothing reduces Gibb's phenomenon. zero is no smoothing\n"})}),"\n",(0,i.jsx)(n.h3,{id:"classic-wave-tables",children:"classic wave tables"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"parTbl - parabolic wave table.\ntriTbl - triangle wave table.\nsqrTbl - square wave table.\nsawTbl - sawtooth wave table.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"oscillator-unit-generators",children:"oscillator unit generators"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"osc @zzz (freq phase wavetable --\x3e out) band limited wave table oscillator. wavetable is a table created with wavefill.\noscp @zzzz (freq phase phaseOffset wavetable --\x3e out) band limited wave table oscillator pair with phase offset.\nsosc @zz (freq1 freq2 wavetable --\x3e out) band limited hard sync wave table oscillator. freq1 is the fundamental. freq2 is the slave oscil frequency.\npar @zz (freq phase --\x3e out) band limited parabolic wave oscillator.\ntri @zz (freq phase --\x3e out) band limited triangle wave oscillator.\nsquare @zz (freq phase --\x3e out) band limited square wave oscillator.\nsaw @zz (freq phase --\x3e out) band limited sawtooth wave oscillator.\npulse @zzz (freq phase duty --\x3e out) band limited pulse wave oscillator.\nvsaw @zzz (freq phase duty --\x3e out) band limited variable sawtooth oscillator.\nssaw @zz (freq1 freq2 --\x3e out) band limited hard sync sawtooth oscillator. freq1 is the fundamental. freq2 is the slave oscil frequency.\nblip @zzz (freq phase numharms --\x3e out) band limited impulse oscillator.\ndsf1 @zzzzz (freq carrierRatio modulatorRatio ampCoef numharms --\x3e out) bandlimited partials with geometric series amplitudes. J.A.Moorer's equation 1\ndsf3 @zzzzz (freq carrierRatio modulatorRatio ampCoef numharms --\x3e out) two sided bandlimited partials with geometric series amplitudes. J.A.Moorer's equation 3\nlftri @zz (freq phase --\x3e out) non band limited triangle wave oscillator.\nlfsaw @zz (freq phase --\x3e out) non band limited sawtooth wave oscillator.\nlfpulse @zzz (freq phase duty --\x3e out) non band limited unipolar pulse wave oscillator.\nlfpulseb @zzz (freq phase duty --\x3e out) non band limited bipolar pulse wave oscillator.\nlfsquare @zz (freq phase --\x3e out) non band limited square wave oscillator.\nimpulse @zz (freq phase --\x3e out) non band limited single sample impulse train oscillator.\nsmoothsaw @zzz (freq phase nth --\x3e out) smoothed sawtooth.\nsmoothsawpwm @zzzz (freq phase nth duty --\x3e out) smoothed sawtooth.\nvosim @zzz (freq phase nth --\x3e out) vosim sim.\nsinosc @zz (freq phase --\x3e out) sine wave oscillator.\ntsinosc @zz (freq iphase --\x3e out) sine wave oscillator.\nsinoscfb @zzz (freq phase feedback --\x3e out) sine wave oscillator with self feedback phase modulation\nsinoscm @zzzz (freq phase mul add --\x3e out) sine wave oscillator with multiply and add.\nklang (freqs amps iphases --\x3e out) a sine oscillator bank. freqs amps and iphases are arrays.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"filter-unit-generators",children:"filter unit generators"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"lag @zz (in decayTime --\x3e out) one pole lag filter. decayTime determines rate of convergence.\nlag2 @zz (in decayTime --\x3e out) cascade of two one pole lag filters. decayTime determines rate of convergence.\nlag3 @zz (in decayTime --\x3e out) cascade of three one pole lag filters. decayTime determines rate of convergence.\nlagud @zzz (in upDecayTime, downDecayTime --\x3e out) one pole lag filter. up/down DecayTimes determines rate of convergence up/down.\nlagud2 @zzz (in upDecayTime, downDecayTime --\x3e out) cascade of two one pole lag filters. up/down DecayTimes determines rate of convergence up/down.\nlagud3 @zzz (in upDecayTime, downDecayTime --\x3e out) cascade of three one pole lag filters. up/down DecayTimes determines rate of convergence up/down.\nlpf1 @zz (in freq --\x3e out) low pass filter. 6 dB/oct.\nhpf1 @zz (in freq --\x3e out) high pass filter. 6 dB/oct.\nlpf @zz (in freq --\x3e out) low pass filter. 12 dB/oct.\nhpf @zz (in freq --\x3e out) high pass filter. 12 dB/oct.\nlpf2 @zz (in freq --\x3e out) low pass filter. 24 dB/oct.\nhpf2 @zz (in freq --\x3e out) high pass filter. 24 dB/oct.\nrlpf @zzz (in freq rq --\x3e out) resonant low pass filter. 12 dB/oct slope. rq is 1/Q.\nrhpf @zzz (in freq rq --\x3e out) resonant high pass filter. 12 dB/oct slope. rq is 1/Q.\nrlpf2 @zzz (in freq rq --\x3e out) resonant low pass filter. 24 dB/oct slope. rq is 1/Q.\nrhpf2 @zzz (in freq rq --\x3e out) resonant high pass filter. 24 dB/oct slope. rq is 1/Q.\nrlpfc @zzz (in freq rq --\x3e out) resonant low pass filter with saturation. 12 dB/oct slope. rq is 1/Q.\nrhpfc @zzz (in freq rq --\x3e out) resonant high pass filter with saturation. 12 dB/oct slope. rq is 1/Q.\nrlpf2c @zzz (in freq rq --\x3e out) resonant low pass filter with saturation. 24 dB/oct slope. rq is 1/Q.\nrhpf2c @zzz (in freq rq --\x3e out) resonant high pass filter with saturation. 24 dB/oct slope. rq is 1/Q.\nbpf @zzz (in freq bw --\x3e out) band pass filter. bw is bandwidth in octaves.\nbsf @zzz (in freq bw --\x3e out) band stop filter. bw is bandwidth in octaves.\napf @zzz (in freq bw --\x3e out) all pass filter. bw is bandwidth in octaves.\npeq @zzzz (in freq bw gain --\x3e out) parametric equalization filter. bw is bandwidth in octaves.\nlsf @zzz (in freq gain --\x3e out) low shelf filter.\nhsf @zzz (in freq gain --\x3e out) high shelf filter.\nlsf1 @zzz (in freq gain --\x3e out) low shelf filter.\nresonz @zzz (in freq rq --\x3e out) resonant filter.\nringz @zzz (in freq ringTime --\x3e out) resonant filter specified by a ring time in seconds.\nformlet @zzzz (in freq atkTime dcyTime --\x3e out) a formant filter whose impulse response is a sine grain.\nklank @zaaa (in freqs amps ringTimes --\x3e out) a bank of ringz filters. freqs amps and ringTimes are arrays.\nleakdc @zz (in coef --\x3e out) leaks away energy at 0 Hz.\nleaky @zz (in coef --\x3e out) leaky integrator.\ndecay @zz (in decayTime --\x3e out) outputs an exponential decay for impulses at the input.\ndecay2 @zzz (in atkTime dcyTime --\x3e out) outputs an exponential attack and decay for impulses at the input.\nhilbert @z (in --\x3e outA outB) returns two signals that are 90 degrees phase shifted from each other.\nampf @zzz (in atkTime dcyTime --\x3e out) amplitude follower.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"delay-unit-generators",children:"delay unit generators"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"delayn @zzk (in delay maxdelay --\x3e out) delay line with no interpolation.\ndelayl @zzk (in delay maxdelay --\x3e out) delay line with linear interpolation.\ndelayc @zzk (in delay maxdelay --\x3e out) delay line with cubic interpolation.\nflange @zzk (in delay maxdelay --\x3e out) flanger with cubic interpolation. delay can be negative. latency is maxdelay.\nflangep @zzk (in delay maxdelay --\x3e out) flanger with cubic interpolation. adds delayed signal instead of subtracts.\ncombn @zzkz (in delay maxdelay decayTime --\x3e out) comb delay filter with no interpolation.\ncombl @zzkz (in delay maxdelay decayTime --\x3e out) comb delay filter with linear interpolation.\ncombc @zzkz (in delay maxdelay decayTime --\x3e out) comb delay filter with cubic interpolation.\nlpcombc @zzkzz (in delay maxdelay decayTime lpfreq --\x3e out) low pass comb delay filter with cubic interpolation.\nalpasn @zzkz (in delay maxdelay decayTime --\x3e out) all pass delay filter with no interpolation.\nalpasl @zzkz (in delay maxdelay decayTime --\x3e out) all pass delay filter with linear interpolation.\nalpasc @zzkz (in delay maxdelay decayTime --\x3e out) all pass delay filter with cubic interpolation.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"plugs",children:"plugs"}),"\n",(0,i.jsx)(n.h3,{id:"control-rate-subgraphs",children:"control rate subgraphs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"kr (fun n --\x3e out) evaluates fun with the current sample rate divided by n, then linearly upsamples all returned signals by n.\nkrc (fun n --\x3e out) evaluates fun with the current sample rate divided by n, then cubically upsamples all returned signals by n.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"control-function-unit-generators",children:"control function unit generators"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"imps @aaz (values durs rate --\x3e out) single sample impulses.\nsteps @aaz (values durs rate --\x3e out) steps\ngates @aaaz (values durs holds rate --\x3e out) gates\nlines @aaz (values durs rate --\x3e out) lines\nxlines @aaz (values durs rate --\x3e out) exponential lines\ncubics @az (values rate --\x3e out) cubic splines\ncurves @aaaz (values curvatures durs rate --\x3e out) curves.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"random-control-unit-generators",children:"random control unit generators"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"lfnoise0 @z (freq --\x3e out) step noise source.\nlfnoise1 @z (freq --\x3e out) ramp noise source.\nlfnoise3 @z (freq --\x3e out) cubic spline noise source.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"tempo-unit-generators",children:"tempo unit generators"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"tempo @az ([bps dur bps dur ...] rate --\x3e out) returns a signal of tempo vs time given a list of interleaved tempos (in beats per second) and durations (in beats).\nbeats @z (tempo --\x3e beats) integrates a tempo signal to produce a signal of the time in beats.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"envelope-unit-generators",children:"envelope unit generators"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"For asr, adsr, dadsr, dahdsr envelopes, the arguments are as follows:\n   delay - a time in seconds. a period of time before the attack segment where the amplitude is zero.\n   attack - a time in seconds to rise from zero to the level specified by the amp argument.\n   hold - a time in seconds to hold at the level specified by the amp argument.\n   delay - a time in seconds to fall from amp to the sustain level.\n   sustain - a level from zero to one which is multiplied by the amp argument. The envelope holds at this level until released.\n   release - a time in seconds to fall from the current level to zero. A release begins whenever the beat time (the integral of tempo), exceeds dur.\n   amp - an amplitude that scales the peak and sustain levels of the envelope.\n   dur - a time in beats to release the envelope.\n   tempo - a signal giving the tempo in beats per second versus time.\n\nadsr @akkz ([attack decay sustain release] amp dur tempo --\x3e envelope) an envelope generator.\ndadsr @akkz ([delay attack decay sustain release] amp dur tempo --\x3e envelope) an envelope generator.\ndahdsr @akkz ([delay attack hold decay sustain release] amp dur tempo --\x3e envelope) an envelope generator.\n\nendfade @zkkkk (in startupTime holdTime fadeTime threshold --\x3e out) after startupTime has elapsed, fade out the sound when peak amplitude has dropped below threshold for more than the holdTime.\nfadeout @zkk (in sustainTime fadeTime --\x3e out) fadeout after sustain.\nfadein @zk (in fadeTime --\x3e out) fade in.\nparenv @k (dur --\x3e out) parabolic envelope. 1-x^2 for x from -1 to 1\nquadenv @k (dur --\x3e out) 4th order envelope. 1-x^4 for x from -1 to 1\noctenv @k (dur --\x3e out) 8th order envelope. 1-x^8 for x from -1 to 1\ntrienv @k (dur --\x3e out) triangular envelope. 1-|x| for x from -1 to 1\ntri2env @k (dur --\x3e out) triangle squared envelope. (1-|x|)^2 for x from -1 to 1\ntrapezenv @k (dur --\x3e out) trapezoidal envelope. (2 - |x-.5| - |x+.5|) for x from -1 to 1\ntrapez2env @k (dur --\x3e out) trapezoid squared envelope. (2 - |x-.5| - |x+.5|)^2 for x from -1 to 1\ncosenv @k (dur --\x3e out) cosine envelope.\nhanenv @k (dur --\x3e out) hanning envelope.\nhan2env @k (dur --\x3e out) hanning squared envelope.\ngaussenv @kk (dur width --\x3e out) gaussian envelope. exp(x^2/(-2*width^2)) for x from -1 to 1\ntsig @zza (trig signal amp --\x3e out) trigger a signal.\ntparenv @zaa (trig dur amp --\x3e out) triggered parabolic envelope. 1-x^2 for x from -1 to 1\ntquadenv @zaa (trig dur amp --\x3e out) triggered 4th order envelope. 1-x^4 for x from -1 to 1\ntoctenv @zaa (trig dur amp --\x3e out) triggered 8th order envelope. 1-x^8 for x from -1 to 1\nttrienv @zaa (trig dur amp --\x3e out) triggered triangular envelope. 1-|x| for x from -1 to 1\nttri2env @zaa (trig dur amp --\x3e out) triggered triangle squared envelope. (1-|x|)^2 for x from -1 to 1\nttrapezenv @zaa (trig dur amp --\x3e out) triggered trapezoidal envelope. (2 - |x-.5| - |x+.5|) for x from -1 to 1\nttrapez2env @zaa (trig dur amp --\x3e out) triggered trapezoid squared envelope. (2 - |x-.5| - |x+.5|)^2 for x from -1 to 1\ntcosenv @zaa (trig dur amp --\x3e out) triggered cosine envelope.\nthanenv @zaa (trig dur amp --\x3e out) triggered hanning envelope.\nthan2env @zaa (trig dur amp --\x3e out) triggered hanning squared envelope.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"spawn-unit-generators",children:"spawn unit generators"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"ola (sounds hops rate numChannels --\x3e out) overlap add. This is the basic operator for polyphony. \n"})}),"\n",(0,i.jsx)(n.h3,{id:"pause-unit-generator",children:"pause unit generator"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"pause @zz (in amp --\x3e out) pauses the input when amp is <= 0, otherwise in is multiplied by amp.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"panner-unit-generators",children:"panner unit generators"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"itd @zzk (in pan maxdelay --\x3e out) interaural time delay.\npan2 @zz (in pos --\x3e [left right]) stereo pan. pos 0 is center. pos -1 is full left, pos +1 is full right.\nrot2 @zzz (left right pos --\x3e [left right]) stereo rotation. pos 0 is no rotation, +/-1 is 180 degrees, -.5 is -90 degrees, +.5 is +90 degrees.\nbal2 @zzz (left right pos --\x3e [left right]) stereo balance control. pos 0 is center. pos -1 is full left, pos +1 is full right.\nfade2 @zzz (left right pos --\x3e out) cross fade between two inputs. pos 0 is equal mix. pos -1 is all left, pos +1 is all right.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"trigger-unit-generators",children:"trigger unit generators"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"tr @z (in --\x3e out) transitions from nonpositive to positive become single sample impulses.\nntr @z (in --\x3e out) transitions from negative to nonnegative become single sample impulses.\ngate @z (in hold --\x3e out) outputs 1 for hold seconds after each trigger, else outputs zero.\nsah @zz (in trigger --\x3e out) sample and hold\nseq @az (in trigger --\x3e out) pulls one value from the input for each trigger. output sustains at that level until the next trigger.\niseq @az (in trigger --\x3e out) pulls one value from the input for each trigger. outputs that value for one sample. outputs zero when there is no trigger.\npdiv @zzz (in n istart --\x3e out) pulse divider. outputs one impulse from the output for each n impulses in the input. istart is an offset. istart = 0 outputs a pulse on the first input pulse.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"bounds-unit-generators",children:"bounds unit generators"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"clip @zzz (in lo hi --\x3e out) constrain the input to the bounds by clipping.\nwrap @zzz (in lo hi --\x3e out) constrain the input to the bounds by wrapping.\nfold @zzz (in lo hi --\x3e out) constrain the input to the bounds by folding at the edges.\niwrap @zzz (in lo hi --\x3e out) constrain the input to the bounds by wrapping. all inputs treated as integers.\nifold @zzz (in lo hi --\x3e out) constrain the input to the bounds by folding at the edges. all inputs treated as integers.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"mouse-control-unit-generators",children:"mouse control unit generators"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mousex @zz (lo hi --\x3e out) returns a signal of the X coordinate of the mouse mapped to the linear range lo to hi.\nmousey @zz (lo hi --\x3e out) returns a signal of the Y coordinate of the mouse mapped to the linear range lo to hi.\nxmousex @zz (lo hi --\x3e out) returns a signal of the X coordinate of the mouse mapped to the exponential range lo to hi.\nxmousey @zz (lo hi --\x3e out) returns a signal of the Y coordinate of the mouse mapped to the exponential range lo to hi.\nmousex1 @zz (lo hi --\x3e out) returns the current value of the X coordinate of the mouse mapped to the linear range lo to hi.\nmousey1 @zz (lo hi --\x3e out) returns the current value of the Y coordinate of the mouse mapped to the linear range lo to hi.\nxmousex1 @zz (lo hi --\x3e out) returns the current value of the X coordinate of the mouse mapped to the exponential range lo to hi.\nxmousey1 @zz (lo hi --\x3e out) returns the current value of the Y coordinate of the mouse mapped to the exponential range lo to hi.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"midi-control",children:"MIDI control"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"midiStart (--\x3e) start up MIDI services\nmidiRestart (--\x3e) rescan MIDI services\nmidiStop (--\x3e) stop MIDI services\nmidiList (--\x3e) list MIDI endpoints\nmidiConnectInput (sourceUID index --\x3e) connect a MIDI source\nmidiDisconnectInput (sourceUID index --\x3e) disconnect a MIDI source\nmidiDebug (onoff --\x3e) turn on or off midi input monitoring\n"})}),"\n",(0,i.jsx)(n.h3,{id:"midi-instantaneous-value",children:"MIDI instantaneous value"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mctl1 @zzzzz (srcIndex chan ctlnum lo hi --\x3e out) value of midi controller mapped to the linear range [lo,hi].\nmpoly1 @zzzzz (srcIndex chan key lo hi --\x3e out) value of midi poly key pressure mapped to the linear range [lo,hi].\nmtouch1 @zzzz (srcIndex chan lo hi --\x3e out) value of midi channel pressure mapped to the linear range [lo,hi].\nmbend1 @zzzz (srcIndex chan lo hi --\x3e out) value of midi pitch bend mapped to the linear range [lo,hi].\nmprog1 @zz (srcIndex chan --\x3e out) value of midi channel program 0-127.\nmgate1 @zzz (srcIndex chan key --\x3e out) value of midi key state. 1 if key is down, 0 if key is up.\nmlastkey1 @zz (srcIndex chan --\x3e out) value of key of most recent midi note on.\nmlastvel1 @zzzz (srcIndex chan lo hi --\x3e out) value of velocity of most recent midi note on mapped to the linear range [lo,hi].\nxmctl1 @zzzzz (srcIndex chan ctlnum lo hi --\x3e out) value of midi controller mapped to the exponential range [lo,hi].\nxmpoly1 @zzzzz (srcIndex chan key lo hi --\x3e out) value of midi poly key pressure mapped to the exponential range [lo,hi].\nxmtouch1 @zzzz (srcIndex chan lo hi --\x3e out) value of midi channel pressure mapped to the exponential range [lo,hi].\nxmbend1 @zzzz (srcIndex chan lo hi --\x3e out) value of midi pitch bend mapped to the exponential range [lo,hi].\nxmlastvel1 @zzzz (srcIndex chan lo hi --\x3e out) value of velocity of most recent midi note on mapped to the exponential range [lo,hi].\n"})}),"\n",(0,i.jsx)(n.h3,{id:"midi-control-signal",children:"MIDI control signal"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mctl @zzzzz (srcIndex chan ctlnum lo hi --\x3e out) signal of midi controller mapped to the linear range [lo,hi].\nmpoly @zzzzz (srcIndex chan key lo hi --\x3e out) signal of midi poly key pressure mapped to the linear range [lo,hi].\nmtouch @zzzz (srcIndex chan lo hi --\x3e out) signal of midi channel pressure mapped to the linear range [lo,hi].\nmbend @zzzz (srcIndex chan lo hi --\x3e out) signal of midi pitch bend mapped to the linear range [lo,hi].\nmlastkey @zz (srcIndex chan --\x3e out) signal of key of most recent midi note on.\nmlastvel @zzzz (srcIndex chan lo hi --\x3e out) signal of velocity of most recent midi note on mapped to the linear range [lo,hi].\nmprog @zz (srcIndex chan --\x3e out) signal of midi channel program 0-127.\nmgate @zzz (srcIndex chan key --\x3e out) signal of midi key state. 1 if key is down, 0 if key is up.\nxmctl @zzzzz (srcIndex chan ctlnum lo hi --\x3e out) signal of midi controller mapped to the exponential range [lo,hi].\nxmpoly @zzzzz (srcIndex chan key lo hi --\x3e out) signal of midi poly key pressure mapped to the exponential range [lo,hi].\nxmtouch @zzzz (srcIndex chan lo hi --\x3e out) signal of midi channel pressure mapped to the exponential range [lo,hi].\nxmbend @zzzz (srcIndex chan lo hi --\x3e out) signal of midi pitch bend mapped to the exponential range [lo,hi].\nxmlastvel @zzzz (srcIndex chan lo hi --\x3e out) signal of velocity of most recent midi note on mapped to the exponential range [lo,hi].\n"})}),"\n",(0,i.jsx)(n.h3,{id:"zref-control-signal",children:"ZRef control signal"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"zctl @z (zref --\x3e out) makes a smoothed control signal from a zref.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"set-operations",children:"set operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"S (list --\x3e set) removes all duplicates from a finite list.\nS| (listA listB --\x3e set) returns the set union of the elements of lists A and B.\nS& (listA listB --\x3e set) returns the set intersection of the elements of lists A and B.\nSx (listA listB --\x3e set) returns the set of the elements which occur in list A or B, but not both.\nS- (listA listB --\x3e set) returns the set of the elements of listA which do not occur in listB.\nS= (listA listB --\x3e set) returns 1 if the set of elements in listA is equal to the set of elements in listB.\nsubset? (listA listB --\x3e set) returns 1 if the set of elements of listA is a subset of the set of elements of listB. else 0.\nfind (item(s) list --\x3e set) returns index of item in finite list, or -1 if not in list.\nShas (item(s) list --\x3e set) returns 1 if finite list contains item(s), else 0.\n"})}),"\n",(0,i.jsx)(n.h2,{id:"user-defined-functions",children:"USER DEFINED FUNCTIONS"}),"\n",(0,i.jsx)(n.h3,{id:"printing",children:"printing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"prall (list --\x3e) print every item in a list on a separate line\n"})}),"\n",(0,i.jsx)(n.h3,{id:"common-counts",children:"common counts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"2X (a --\x3e [a a]) a 2 X\n3X (a --\x3e [a a a]) a 3 X\n4X (a --\x3e [a a a a]) a 4 X\n5X (a --\x3e [a .. a]) a 5 X\n6X (a --\x3e [a .. a]) a 6 X\n7X (a --\x3e [a .. a]) a 7 X\n8X (a --\x3e [a .. a]) a 8 X\n9X (a --\x3e [a .. a]) a 9 X\n2XZ (a --\x3e #[a a]) a 2 XZ\n3XZ (a --\x3e #[a a a]) a 3 XZ\n4XZ (a --\x3e #[a a a a]) a 4 XZ\n5XZ (a --\x3e #[a .. a]) a 5 XZ\n6XZ (a --\x3e #[a .. a]) a 6 XZ\n7XZ (a --\x3e #[a .. a]) a 7 XZ\n8XZ (a --\x3e #[a .. a]) a 8 XZ\n9XZ (a --\x3e #[a .. a]) a 9 XZ\n1N (a --\x3e b) keeps the first item of the list a\n2N (a --\x3e b) keeps the first 2 items of the list a\n3N (a --\x3e b) keeps the first 3 items of the list a\n4N (a --\x3e b) keeps the first 4 items of the list a\n5N (a --\x3e b) keeps the first 5 items of the list a\n6N (a --\x3e b) keeps the first 6 items of the list a\n7N (a --\x3e b) keeps the first 7 items of the list a\n8N (a --\x3e b) keeps the first 8 items of the list a\n9N (a --\x3e b) keeps the first 9 items of the list a\n1N> (a --\x3e b) skips the first item of the list a\n2N> (a --\x3e b) skips the first 2 items of the list a\n3N> (a --\x3e b) skips the first 3 items of the list a\n4N> (a --\x3e b) skips the first 4 items of the list a\n5N> (a --\x3e b) skips the first 5 items of the list a\n6N> (a --\x3e b) skips the first 6 items of the list a\n7N> (a --\x3e b) skips the first 7 items of the list a\n8N> (a --\x3e b) skips the first 8 items of the list a\n9N> (a --\x3e b) skips the first 9 items of the list a\n-1s (n --\x3e [-1 ...]) returns a stream of n minus ones.\n0s (n --\x3e [0 ...]) returns a stream of n zeroes.\n1s (n --\x3e [1 ...]) returns a stream of n ones.\n2s (n --\x3e [2 ...]) returns a stream of n twos.\n-1z (n --\x3e #[-1 ...]) returns a signal of n minus ones.\n0z (n --\x3e #[0 ...]) returns a signal of n zeroes.\n1z (n --\x3e #[1 ...]) returns a signal of n ones.\n2z (n --\x3e #[2 ...]) returns a signal of n twos.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"list-ops-1",children:"list ops"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"0at (a --\x3e a[0]) get the item at index 0\n1at (a --\x3e a[1]) get the item at index 1\n2at (a --\x3e a[2]) get the item at index 2\n3at (a --\x3e a[3]) get the item at index 3\n4at (a --\x3e a[4]) get the item at index 4\n5at (a --\x3e a[5]) get the item at index 5\n6at (a --\x3e a[6]) get the item at index 6\n7at (a --\x3e a[7]) get the item at index 7\n8at (a --\x3e a[8]) get the item at index 8\n9at (a --\x3e a[9]) get the item at index 9\n"})}),"\n",(0,i.jsx)(n.h3,{id:"ordinal-accessing",children:"ordinal accessing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"1st (a --\x3e a[0]) get the first item\n2nd (a --\x3e a[1]) get the second item\n3rd (a --\x3e a[2]) get the third item\n4th (a --\x3e a[3]) get the fourth item\n5th (a --\x3e a[4]) get the fifth item\n6th (a --\x3e a[5]) get the sixth item\n7th (a --\x3e a[6]) get the seventh item\n8th (a --\x3e a[7]) get the eighth item\n9th (a --\x3e a[8]) get the ninth item\n10th (a --\x3e a[9]) get the tenth item\nlast (a --\x3e b) get the last value of a. or zero if empty.\nseparate (a b --\x3e c d) separates the list a such that list c contains all items of a for which b is true and list d contains all items of a for which b is false.\nspan (a b --\x3e c d) separates the list a such that list c contains all items of a for which b is true and list d contains all items of a for which b is false.\nrunlengths (a --\x3e b) returns a list of the number of consecutive occurrences of items in the input list.\ndivmod (a b --\x3e div mod) equivalent to ((a b idiv)(a b imod))\n"})}),"\n",(0,i.jsx)(n.h3,{id:"each-operators",children:"each operators"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"each2 (a b --\x3e a @ b @) apply the each operator to two items on the stack\neach3 (a b c --\x3e a @ b @ c @) apply the each operator to three items on the stack\neach4 (a b c d --\x3e a @ b @ c @ d @) apply the each operator to four items on the stack\ncart2 (a b --\x3e a @1 b @2) apply the each operator for a cartesian product to two items on the stack\ncart3 (a b c --\x3e a @1 b @2 c @3) apply the each operator for a cartesian product to three items on the stack\ncart4 (a b c d --\x3e a @1 b @2 c @3 d @4) apply the each operator for a cartesian product to four items on the stack\nrcart2 (a b --\x3e a @2 b @1) apply the each operator for a reverse cartesian product to two items on the stack\nrcart3 (a b c --\x3e a @3 b @2 c @1) apply the each operator for a reverse cartesian product to three items on the stack\nrcart4 (a b c d --\x3e a @4 b @3 c @2 d @1) apply the each operator for a reverse cartesian product to four items on the stack\n"})}),"\n",(0,i.jsx)(n.h3,{id:"list-generation-1",children:"list generation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"nord (n --\x3e stream) finite stream of counting numbers. equivalent to: ord n N\nnordz (n --\x3e stream) finite signal of counting numbers. equivalent to: ordz n N\nnnat (n --\x3e stream) finite stream of counting numbers. equivalent to: nat n N\nnnatz (n --\x3e stream) finite signal of counting numbers. equivalent to: natz n N\n/X (x n --\x3e b) divide x by n and make a list repeating that value n times. Useful for tupletizing a duration.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"range-mapping",children:"range mapping"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"MS (L R --\x3e M S) or (M S --\x3e L R) stereo to mid-side conversion. this function is self inverse.\n-+ (ctr dev --\x3e lo hi) convert a center and deviation to lo and hi\n+- (a b --\x3e hi lo) convert a center and deviation to hi and lo\nmuldiv (a b --\x3e a*b a/b) return both product and quotient\ndivmul (a b --\x3e a/b a*b) return both quotient and product\ncdv (lo hi --\x3e ctr dev) convert lo and hi to center and deviation\nunilin (in lo hi --\x3e out) map a unipolar input to the linear interval [lo, hi]\nunilinc (in lo hi --\x3e out) map a unipolar input to the linear interval [lo, hi] clip input to bounds.\nuniexp (in lo hi --\x3e out) map a unipolar input to the exponential interval [lo, hi]\nuniexpc (in lo hi --\x3e out) map a unipolar input to the exponential interval [lo, hi] clip input to bounds.\nbilin (in lo hi --\x3e out) map a bipolar input to the linear interval [lo, hi]\nbilinc (in lo hi --\x3e out) map a bipolar input to the linear interval [lo, hi] clip input to bounds.\nbiexp (in lo hi --\x3e out) map a bipolar input to the exponential interval [lo, hi]\nbiexpc (in lo hi --\x3e out) map a bipolar input to the exponential interval [lo, hi] clip input to bounds.\nlinlin (in a b c d --\x3e out) map a linear interval [a,b] to a linear interval [c,d].\nlinlinc (in a b c d --\x3e out) map a linear interval [a,b] to a linear interval [c,d]. clip input to bounds.\nlinexp (in a b c d --\x3e out) map a linear interval [a,b] to an exponential interval [c,d].\nlinexpc (in a b c d --\x3e out) map a linear interval [a,b] to an exponential interval [c,d]. clip input to bounds.\nexplin (in a b c d --\x3e out) map an exponential interval [a,b] to a linear interval [c,d].\nexplinc (in a b c d --\x3e out) map an exponential interval [a,b] to a linear interval [c,d]. clip input to bounds.\nexpexp (in a b c d --\x3e out) map an exponential interval [a,b] to an exponential interval [c,d]\nexpexpc (in a b c d --\x3e out) map an exponential interval [a,b] to an exponential interval [c,d]. clip input to bounds.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"range-checking",children:"range checking"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"inrange (in lo hi --\x3e out) inclusive range check. return 1 if input is in the interval [lo,hi].\nexrange (in lo hi --\x3e out) exclusive range check. return 1 if input is in the interval (lo,hi).\n"})}),"\n",(0,i.jsx)(n.h3,{id:"borrowed-from-apl",children:"borrowed from APL"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"reshape (list shape --\x3e list) shape is a list of the sizes of each dimension of a matrix into which the input is reshaped.\niota (shape --\x3e list) returns a matrix of the positive integers in the given shape.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"conditional-mapping",children:"conditional mapping"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mapif (list bools fun --\x3e list) apply fun to those values for which the corresponding bool is true. Otherwise pass the value as is.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"data-flow-operators",children:"data flow operators"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"abf (a b f --\x3e afx bfx) apply a function to top two items. equivalent to: a f b f\nabcf (a b c f --\x3e af bf cf) apply a function to top three items. equivalent to: a f b f c f\nafg (a f g --\x3e af ag) apply two functions to the top item. equivalent to: a f a g\nafgh (a f g h - af ag ah) apply three functions to the top item. equivalent to: a f a g a h\nabfg (a b f g --\x3e af bg) interleaved application. equivalent to: a f b g\nabcfgh (a b c f g h --\x3e af bg ch) interleaved application. equivalent to: a f b g c h\nabfg2 (a b f g --\x3e abf abg) interleaved application of binary operators. equivalent to: a b f a b g\n"})}),"\n",(0,i.jsx)(n.h3,{id:"statistics",children:"statistics"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mean (a --\x3e m) mean of list a.\natf (a x --\x3e out) return the linear interpolated value of list a at position x.\nmedian (a --\x3e m) median of list a.\nvariance (a --\x3e v) variance of list a.\ndeviation (a --\x3e sd) standard deviation of list a.\nvmag (a --\x3e |a|) vector magnitude of list a.\nfac (a --\x3e b) factorial of a\n"})}),"\n",(0,i.jsx)(n.h3,{id:"numbers",children:"numbers"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"factors (x --\x3e fs) returns a list of the factors of integer x.\npfactors (x --\x3e fs) returns a list of the prime factors of integer x.\ncoprime (a b --\x3e bool) test whether numbers  are coprime.\ncoprimes (a --\x3e bool) test whether numbers in list are coprime.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"common-random-number-generators",children:"common random number generators"}),"\n",(0,i.jsx)(n.h3,{id:"unipolar-random-number-generators",children:"unipolar random number generators"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"urand (--\x3e r) return a random number from 0 to 1.\nurands (--\x3e r) return a stream of random numbers from 0 to 1.\nurandz (--\x3e r) return a signal of random numbers from 0 to 1.\nnurands (n --\x3e r) return a stream of n random numbers from 0 to 1.\nnurandz (n --\x3e r) return a signal of n random numbers from 0 to 1.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"bipolar-random-number-generators",children:"bipolar random number generators"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"brand (--\x3e r) return a random number from -1 to 1.\nbrands (--\x3e r) return a stream of random numbers from -1 to 1.\nbrandz (--\x3e r) return a signal of random numbers from -1 to 1.\nnbrands (n --\x3e r) return a stream of n random numbers from -1 to 1.\nnbrandz (n --\x3e r) return a signal of n random numbers from -1 to 1.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"random-walks",children:"random walks"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"iwalk (step lo hi --\x3e stream) integer random walk.\niwalk2 (step bounds --\x3e stream) integer random walk. bipolar bounds.\nwalk (step lo hi --\x3e stream) random walk.\nwalk2 (step bounds --\x3e stream) random walk. bipolar bounds.\niwalkz (step lo hi --\x3e signal) integer random walk.\niwalk2z (step bounds --\x3e signal) integer random walk. bipolar bounds.\nwalkz (step lo hi --\x3e signal) random walk.\nwalk2z (step bounds --\x3e signal) random walk. bipolar bounds.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"composite-ugens",children:"composite ugens"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"oltx (sounds susTime xfadeTime density numChannels --\x3e out) texture of overlapping sounds. OverlapTexture, adapted from SC2\nxftx (sounds susTime xfadeTime numChannels --\x3e out) texture of crossfaded sounds. XFadeTexture, adapted from SC2\nrandsign (in --\x3e out) 50% chance of flipping the sign\nfamp (freq root exponent --\x3e out) frequency dependent amplitude compensation factor.\nlfo (freq phase lo hi --\x3e out) sine wave lfo with linear range.\nxlfo (freq phase lo hi --\x3e out) sine wave lfo with exponential range.\nsplay (x --\x3e out) evenly spread an array of mono sources across a stereo field.\nrsplay (x --\x3e out) evenly spread an array of mono sources across a stereo field.\nsplayd (x maxdelay --\x3e out) evenly spread an array of mono sources across a stereo field using interaural time delay.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"amplitude",children:"amplitude"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"rms (in --\x3e out) calculate the rms amplitude. input must be finite.\nrmsdb (in --\x3e out) calculate the rms amplitude in decibels. input must be finite.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"uses-of-hilbert-processor",children:"uses of hilbert processor"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"freqShift (in shiftHz --\x3e out) frequency shifter.\nssb (in shiftHz --\x3e out) single sideband modulator.\nbphaser (in lfoRate --\x3e L R) barberpole phaser.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"simple-allpass-reverbs",children:"simple allpass reverbs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"apverb4 (in delayTime decayTime --\x3e out) four stage stereo allpass with random delay times\napverb6 (in delayTime decayTime --\x3e out) six stage stereo allpass with random delay times\n"})}),"\n",(0,i.jsx)(n.h3,{id:"random-sweeps-and-pans",children:"random sweeps and pans"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"rline (dur lo hi --\x3e out) random line. both ends are uniformly random between lo and hi.\nxrline (dur lo hi --\x3e out) exponentially random line. both ends are exponentially random between lo and hi.\nrxline (dur lo hi --\x3e out) random exponential line. both ends are uniformly random between lo and hi.\nxrxline (dur lo hi --\x3e out) exponentially random exponential line. both ends are exponentially random between lo and hi.\nrpanl2 (in --\x3e out) stereo pan at a fixed random position.\nrpan2 (in --\x3e out) stereo pan at a fixed random position.\nrbal2 (a b --\x3e out) stereo balance at a fixed random position.\nrrot2 (in --\x3e out) stereo rotation at a fixed random position.\nrsweeppan2 (in dur --\x3e out) stereo pan with a random sweep.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"crossover-filters",children:"crossover filters"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"crossover (in freq --\x3e high_band low_band) Linkwitz-Riley crossover filters. low_band + high_band yields a flat frequency response.\ncrossover1 (in freq --\x3e high_band low_band) first order crossover filters. low_band + high_band yields a flat frequency response.\nmidcrossover (in freq bw --\x3e outer_band inner_band) middle crossover. outer_band + inner_band yields a flat frequency response.\ncrossovermix (a b freq --\x3e out) Linkwitz-Riley crossover mixer.\ncrossover1mix (a b freq --\x3e out) Linkwitz-Riley crossover mixer.\nmidcrossovermix (a b freq bw --\x3e out) Linkwitz-Riley crossover mixer.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"delays-with-wetdry-mix",children:"delays with wet/dry mix"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"combnw (in delay maxdelay decay wet --\x3e out) combn delay with wet/dry mix control.\ncomblw (in delay maxdelay decay wet --\x3e out) combl delay with wet/dry mix control.\ncombcw (in delay maxdelay decay wet --\x3e out) combc delay with wet/dry mix control.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"complex-polar",children:"complex polar"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"xp (x y --\x3e rho theta) complex to polar\npx (rho theta --\x3e x y) polar to complex\n"})}),"\n",(0,i.jsx)(n.h3,{id:"zero-padding",children:"zero padding"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"padz (a n --\x3e out) zero pad after. add n zeroes after list a.\nzpad (a n --\x3e out) zero pad before. add n zeroes before list a.\nzpadz (a n --\x3e out) zero pad before and after. add n zeroes before and after list a.\nnextPow2 (a --\x3e b) next power of two greater than or equal to a.\npadzto (a n --\x3e out) add enough zeroes after list a to make the total size equal to n.\ndly (a t --\x3e out) delay signal a by t seconds.\nN/2 (a --\x3e b) reduce the length of a stream or signal by half.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"dsp-functions",children:"dsp functions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"rfft (re -- > re im) real fft\nsincfill (n nz --\x3e out) return a sinc (sin(x)/x) wave of size n containing nz zero crossings.\nkaisersinc (n nz stopBandAttenuation --\x3e out) return a kaiser windowed sinc (win(x)*sin(x)/x) wave of size n containing nz zero crossings.\nsr/ (samples --\x3e seconds) convert from samples to seconds.\nsr* (seconds --\x3e samples) convert from seconds to samples.\nduration (signal --\x3e duration) return the duration of a finite signal.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"normalization",children:"normalization"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"normalize (in --\x3e out) scale a list so that the peak absolute value is 1.\nconormalize (in --\x3e out) normalize a list of lists with respect to the maximum absolute peak of all of them.\nconormalizeb (in --\x3e out) normalize to y a list of lists with respect to the maximum absolute peak of all of them.\nsumto1 (in --\x3e out) scale a list so that its sum is 1.\nsumto (x y --\x3e out) scale the list x so that its sum is y.\nabsumto (x y --\x3e out) scale the list x so that the sum of the absolute values is y.\nsumcut (x y --\x3e out) cut the list x so that its sum is y. e.g.  nat pi sumcut ==> [0 1 2 .14159]\nqedo (x n --\x3e q) take a ratio and quantize it to n edo.\nq12 (x --\x3e q) take a ratio and quantize it to 12 edo.\nq72 (x --\x3e q) take a ratio and quantize it to 72 edo.\ndv (x d --\x3e out) add random deviations of amplitude d.\nldv (x d --\x3e out) add deviations of amplitude d in log2 space.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"12-tone-pitch-set-operations",children:"12 tone pitch set operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"ps-norm (x --\x3e y) pitch set normalization.\nps-inv (x --\x3e y) pitch set mirror inversion.\nps-rot (x --\x3e y) return a normalized rotation of a pitch set x.\nps-rots (x --\x3e y) return a list of all normalized rotations of a pitch set x.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"pitch-operations",children:"pitch operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"invert (x --\x3e y) mirror inversion. [1 5 4 3] --\x3e [5 1 2 3]\nreplacehead (x v --\x3e y) replace the head of list x with v.\nmonotonic (x m --\x3e y) adds multiples of m to elements of x in order to create a monotonic ascending sequence.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"rhythm",children:"rhythm"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"rdiv (n p --\x3e durs) randomly subdivide a total duration of n beats into p durations. n and p must be integers.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"list-co-length-operations",children:"list co-length operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"shortest (x --\x3e y) make all lists in list x as short as the shortest list\nlongest (x --\x3e y) make all lists in list x as long as the longest list via hang\ncycLongest (x --\x3e y) make all lists in list x as long as the longest list via cyc\ncyclcm (x --\x3e y) make all lists in list x as long as the least common multiple of their lengths.\nmircyc (x --\x3e y) return a mirrored cycle. i.e. [1 2 3 4] --\x3e [1 2 3 4 3 2 1 2 3 4 3 2...]\nmirLongest (x --\x3e y) make all lists in list x as long as the longest list via mircyc\n"})}),"\n",(0,i.jsx)(n.h3,{id:"synths",children:"synths"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"blah (pch dyn dur pan -> outs) saw->filter->amp synth voice\nlfblah (pch dyn dur pan -> outs) lfsaw->filter->amp synth voice\nsaw-syn (freq db dur pan harms adsr --\x3e out) sawtooth wave synth\nsquare-syn (freq db dur pan harms adsr --\x3e out) square wave synth\npulse-syn (freq duty db dur pan harms adsr --\x3e out) variable width pulse wave synth\nosc-syn (freq db dur pan harms adsr wt --\x3e out) wavetable oscillator synth\nsaw-rsyn (freq db dur pan harms rq adsr --\x3e out) sawtooth wave synth with resonant lpf\nsquare-rsyn (freq db dur pan harms rq adsr --\x3e out) square wave synth with resonant lpf\nfm-syn (freq c m mx fb db dur pan adsr --\x3e out) fm synth\nfm-syn3 (freq c m mx fb db dur pan adsr --\x3e out) 3 detuned carrier, 1 modulator fm\n"})}),"\n",(0,i.jsx)(n.h3,{id:"events",children:"events"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"ev-base - a form containing the basic low level information for a music event.\nev-dur (inEvents --\x3e dur) return the duration of inEvents.\nev-starts (inEvents --\x3e startTimes) return a stream of start times for inEvents\nev-end (inEvents --\x3e endTime) return the maximum end time of inEvents.\nev-reverse (inEvents --\x3e outEvents) reverse an event list.\n"})})]})}function x(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(6540);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);